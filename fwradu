#!/bin/sh

# ┌────────────────────────────────────────────┐
# │        🌐 OTA Updater for        AW1000   │
# └────────────────────────────────────────────┘

# Warna terminal untuk tampilan lebih menarik
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
NC='\033[0m'

# URL server OTA dan endpoint terkait
SERVER="https://ota.pakawrt.me"
REGISTER_URL="$SERVER/register"
FIRMWARE_LIST_URL="$SERVER/firmwares"
FIRMWARE_BASE_URL="$SERVER/firmware"
CHANGELOG_URL_BASE="$SERVER/changelog"

# Lokasi penyimpanan firmware sementara
FIRMWARE_LOCAL="/tmp/firmware.bin"

# Direktori penyimpanan token/user info lokal
TOKEN_DIR="./pakawrt-token"

# Fungsi untuk menampilkan banner kontak dan pembayaran
show_payment_banner() {
  printf "\n${YELLOW}"
  echo "╔═════════════════════════════════════════════╗"
  echo "║       🚀 OTA UPDATE PAKAWRT AW1000 🚀       ║"
  echo "╠═════════════════════════════════════════════╣"
  echo "║ 📞 Contact Admin For Further Information... ║"
  echo "║ 💳                                          ║
  echo "║ 🔗 Telegram : https://t.me/Raducksijaa      ║"
  echo "╚═════════════════════════════════════════════╝"
  printf "${NC}\n"
}

# Fungsi untuk menampilkan changelog firmware (multiline support, JSON fallback ke bin.txt)
# Fungsi untuk menampilkan changelog firmware (multiline support, JSON fallback ke bin.txt)
show_changelog() {
  local firmware="$1"
  local changelog_json_url="$CHANGELOG_URL_BASE/$firmware"
  local changelog_txt_url="$CHANGELOG_URL_BASE/bin.txt"

  echo "📦 Firmware: $firmware"

  # Coba ambil changelog JSON dulu
  local changelog_json
  changelog_json=$(curl -fs "$changelog_json_url" 2>/dev/null)
  if echo "$changelog_json" | jq -e . >/dev/null 2>&1; then
    local raw_date log details formatted_date
    raw_date=$(echo "$changelog_json" | jq -r '.date // empty')
    
    # Mengatur tanggal release dari changelog JSON, pastikan formatnya valid
    if [ -n "$raw_date" ] && date -d "$raw_date" >/dev/null 2>&1; then
      formatted_date=$(date -d "$raw_date" "+%d-%m-%Y")
    else
      formatted_date="Tanggal tidak tersedia"
    fi
    
    # Menampilkan tanggal
    echo "🕒 Release Date: $formatted_date"
    echo "╔═════════════════════════════════╗"
    echo "║       FIRMWARES CHANGELOGS      ║"
    echo "╚═════════════════════════════════╝"
    log=$(echo "$changelog_json" | jq -r '.log // empty')
    details=$(echo "$changelog_json" | jq -c '.details // []')

    if [ -n "$log" ]; then
      printf "%b\n" "$log"
    elif [ "$details" != "[]" ] && [ "$details" != "null" ]; then
      echo "$changelog_json" | jq -r '.details[]'
    else
      echo "📭 No changelog available"
    fi

  else
    # fallback ke bin.txt
    local changelog_txt changelog_match
    changelog_txt=$(curl -fs "$changelog_txt_url" 2>/dev/null)
    if [ -z "$changelog_txt" ]; then
      echo "⚠️  Changelog not found (JSON and TXT missing)"
      echo "═══════════════════════════════════"
      return
    fi
    changelog_match=$(echo "$changelog_txt" | awk -v fw="### $firmware" '
      $0 == fw {found=1; next}
      found && /^### / {exit}
      found
    ')
    echo "🕒 Release Date: -"
    if [ -n "$changelog_match" ]; then
      echo "$changelog_match"
    else
      echo "📭 No changelog available in bin.txt"
    fi
  fi
  echo "═══════════════════════════════════"
}

# Cek dan pastikan perintah-perintah penting tersedia
for cmd in curl jq sha256sum; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "❌ Command not found: $cmd"
    if [ "$cmd" = "jq" ]; then
      echo "📦 Attempting to install jq using opkg..."
      opkg update && opkg install jq
      if ! command -v jq >/dev/null 2>&1; then
        echo "❌ Failed to install jq. Please install it manually."
        exit 1
      fi
    else
      echo "❌ Please install $cmd manually."
      exit 1
    fi
  fi
done

# Ambil informasi sistem untuk info device
MODEL=$(cat /proc/device-tree/model 2>/dev/null || echo "Unknown")
OPENWRT_VERSION=$(grep 'DISTRIB_RELEASE=' /etc/openwrt_release | cut -d"'" -f2)
KERNEL_VERSION=$(uname -r)
ARCH=$(uname -m)
DATE_NOW=$(date "+%d-%m-%Y")
TIME_NOW=$(date "+%H:%M:%S")
RAW_HWID=$(ip link show | awk '/ether/ {print $2; exit}')
HWID_HASH=$(echo -n "$RAW_HWID" | sha256sum | cut -d ' ' -f1)
HOSTNAME_FIRMWARE=$(cat /proc/sys/kernel/hostname 2>/dev/null || hostname)

# Tampilkan info device di terminal
printf "\n${GREEN}"
echo "  🚀 OTA  AW1000 🚀"
echo "╔═════════════════════════════════╗"
echo "║        DEVICE INFORMATION       ║"
echo "╚═════════════════════════════════╝"
printf "🖥️ %-10s : %s\n" "Device" "$MODEL"
printf "🏷️ %-10s : %s\n" "Hostname" "$HOSTNAME_FIRMWARE"
printf "📡 %-10s : %s\n" "Arch" "$ARCH"
printf "⚙️ %-10s : %s\n" "OpenWrt" "$OPENWRT_VERSION"
printf "🔁 %-10s : %s\n" "Kernel" "$KERNEL_VERSION"
printf "📆 %-10s : %s\n" "Date" "$DATE_NOW"
printf "🕐 %-10s : %s\n" "Time" "$TIME_NOW"
echo -e "══════════════════════════════════${NC}"

# Siapkan direktori token dan cek user sudah terdaftar atau belum
mkdir -p "$TOKEN_DIR" || { echo "❌ Failed to create token directory."; exit 1; }
USERNAME_FILE="$TOKEN_DIR/$HWID_HASH.username"

if [ -f "$USERNAME_FILE" ]; then
  USERNAME=$(cat "$USERNAME_FILE")
  echo "👋 Welcome Back @$USERNAME"

  CHECK_JSON=$(curl -s "$FIRMWARE_LIST_URL?username=$USERNAME&hwid=$HWID_HASH")
  STATUS=$(echo "$CHECK_JSON" | jq -r '.status')

  if [ "$STATUS" != "ok" ]; then
    MSG=$(echo "$CHECK_JSON" | jq -r '.message')
    echo "❌ User Not Registered Or Not Yet Approved: $MSG"
    echo "🪙 Please Wait For Admin Approval"
    exit 1
  fi
  echo "✅ Your Device Has Been Approved"

else
  # User baru - input username Telegram dan register
  echo -n "👤 Telegram ID @Username: "
  read -r USERNAME
  [ -z "$USERNAME" ] && { echo "❌ Username cannot be empty."; exit 1; }

  if ! echo "$USERNAME" | grep -qE '^[a-zA-Z0-9_]+$'; then
    echo "❌ Username hanya boleh mengandung huruf, angka, dan underscore."
    exit 1
  fi

  echo "📨 Registering Device To OTA Server..."
  RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
      -d "{\"username\":\"$USERNAME\",\"hwid\":\"$HWID_HASH\"}" \
      "$REGISTER_URL")

  STATUS=$(echo "$RESPONSE" | jq -r '.status')
  MESSAGE=$(echo "$RESPONSE" | jq -r '.message')

  if [ "$STATUS" = "registered" ] || [ "$STATUS" = "already_registered" ]; then
    echo "✅ Successfully Registered To OTA Server"
    echo "$USERNAME" > "$USERNAME_FILE"

    CHECK_JSON=$(curl -s "$FIRMWARE_LIST_URL?username=$USERNAME&hwid=$HWID_HASH")
    STATUS2=$(echo "$CHECK_JSON" | jq -r '.status')

    if [ "$STATUS2" != "ok" ]; then
      MSG=$(echo "$CHECK_JSON" | jq -r '.message')
      echo "❌ User Not Yet Approved: $MSG"
      show_payment_banner
      exit 1
    fi
  else
    echo "❌ Registration Failed: $MESSAGE"
    exit 1
  fi
fi

# Ambil daftar firmware yang bisa diunduh user
FIRMWARE_JSON=$(curl -s "$FIRMWARE_LIST_URL?username=$USERNAME&hwid=$HWID_HASH")

if [ "$(echo "$FIRMWARE_JSON" | jq 'type')" != '"object"' ]; then
  echo "❌ Error: Invalid Response From Server"
  exit 1
fi

FIRMWARES=$(echo "$FIRMWARE_JSON" | jq -r '.firmwares[]')

if [ -z "$FIRMWARES" ]; then
  echo "✅ Device Successfully Registered"
  echo "⏳ Waiting For Admin Approval"
  show_payment_banner
  exit 0
fi

# Tampilkan daftar firmware yang tersedia
echo "✅ Available Firmware For User"
echo "╔═════════════════════════════════╗"
echo "║       AVAILABLE FIRMWARES       ║"
echo "╚═════════════════════════════════╝"
i=1
for fw in $FIRMWARES; do
  echo "  $i) 📦 $fw"
  i=$((i + 1))
done
echo "═══════════════════════════════════"

# Pilih firmware
echo -n "🔢 Select Pakalolo Firmware: "
read -r CHOICE

# Validasi input angka dan range sesuai jumlah firmware
if ! echo "$CHOICE" | grep -qE '^[0-9]+$'; then
  echo "❌ Invalid input. Must be a number."
  exit 1
fi

if [ "$CHOICE" -lt 1 ] || [ "$CHOICE" -gt "$i" ]; then
  echo "❌ Invalid selection. Please select a valid number."
  exit 1
fi

SELECTED=$(echo "$FIRMWARES" | sed -n "${CHOICE}p")
if [ -z "$SELECTED" ]; then
  echo "❌ Firmware selection failed."
  exit 1
fi

# Tampilkan changelog firmware
show_changelog "$SELECTED"

# Konfirmasi sebelum lanjut ke download & flash
echo -n "❓ Proceed to download and flash? (y/N): "
read -r CONFIRM
case "$CONFIRM" in
  [yY][eE][sS]|[yY])
    echo "🔄 Proceeding with firmware download and flash..."
    ;;
  *)
    echo "❌ Cancelled by user."
    exit 0
    ;;
esac

# Unduh firmware ke lokal
echo "⬇️ Downloading $SELECTED"
curl --silent --show-error --connect-timeout 10 --max-time 10 -f -L \
  -o "$FIRMWARE_LOCAL.part" "$FIRMWARE_BASE_URL/$SELECTED?username=$USERNAME&hwid=$HWID_HASH"
EXIT_CODE=$?

if [ $EXIT_CODE -ne 0 ] || [ ! -f "$FIRMWARE_LOCAL.part" ]; then
  echo "❌ Download Failed Or Timed Out"
  echo "🔁 Please Re-Run The Script"
  exit 1
fi

mv "$FIRMWARE_LOCAL.part" "$FIRMWARE_LOCAL"
echo "✅ Firmware Downloaded Successfully"

# ┌────────────────────────────────────────────┐
# │ 🔥 Auto Flashing Firmware                  │
# └────────────────────────────────────────────┘
echo "🚀 Flashing Firmware Automatically... Please Wait..."
sleep 2
sysupgrade -n "$FIRMWARE_LOCAL"

echo "✅ Firmware Flash Complete. Rebooting..."
